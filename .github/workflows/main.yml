name: Haskell CI

on:
  push:
    branches: [ 'main', 'ci', 'ci-uc' ]
  pull_request:
    branches: [ 'main' ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:  [ 'ubuntu-latest', 'macOS-latest' ]
        ghc: [ '9.2', '9.4', '9.6', '9.8', '9.10' ]

    env:
      cache-name: cache-cabal-ghc-${{ matrix.ghc }}
      target-config: --test-show-details=streaming --enable-tests --disable-benchmarks

    steps:
    - run: git config --global core.autocrlf false

    - uses: actions/checkout@v3

    - name: Key for Cache
      id: cache-key
      run: |
        echo "val=${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}-1" > "$GITHUB_OUTPUT"

    - uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: latest

    - name: Restore Cache
      uses: actions/cache/restore@v4
      if: ${{ github.ref_name != 'ci-uc' }}
      with:
        path: ~/.cabal
        key: ${{ steps.cache-key.outputs.val }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install dependencies
      id: inst-dep
      run: |
        cabal update
        if cabal build --offline --only-dependencies ${{ env.target-config }} all
        then
          echo "installed=false" >> "$GITHUB_OUTPUT"
        else
          cabal build --only-dependencies ${{ env.target-config }} all
          echo "installed=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Save Cache
      uses: actions/cache/save@v4
      if: ${{ steps.inst-dep.outputs.installed == 'true' }}
      with:
        path: ~/.cabal
        key: ${{ steps.cache-key.outputs.val }}

    - name: Build
      run: cabal build ${{ env.target-config }} all

    - name: Run tests
      run: env DISABLE_V6_NS=1 cabal test ${{ env.target-config }} all

    - name: Run doctest
      if: ${{ runner.os == 'Linux' }}
      run: |
        cabal install doctest --overwrite-policy=always
        for package in $(cat cabal.project | sed 's/packages://g' | sed 's/dnsext-bowline//g')
        do
          env DISABLE_V6_NS=1 cabal repl --with-ghc=doctest ${{ env.target-config }} $package
        done
        env   DISABLE_V6_NS=1 cabal repl --with-ghc=doctest ${{ env.target-config }} dnsext-bowline:bowline
