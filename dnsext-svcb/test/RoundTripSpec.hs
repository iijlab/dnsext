{-# LANGUAGE OverloadedStrings #-}

module RoundTripSpec (spec) where

import Control.Monad
import DNS.SVCB
import DNS.Types
import DNS.Types.Decode
import DNS.Types.Encode
import Data.ByteString
import Test.Hspec

spec :: Spec
spec = do
    runIO $ runInitIO addResourceDataForSVCB
    describe "encodeRData & decodeRData" $ do
        it "encode/decode SVCB RR correctly" $ do
            forM_ testVectors $ \bs -> do
                case decodeRData SVCB bs of
                  Right rd -> encodeRData rd `shouldBe` bs
                  Left  _  -> error "decodeRData"

testVectors :: [ByteString]
testVectors = [ vectorAliasMode
              , vectorDot
              , vectorPort
              , vectorGenericKey
              , vectorEscape
              , vector2IPv6
              , vectorIPv4EmbeddedIPv6
              , vectorArbitrary
              , vectorALPN
              ]

vectorAliasMode :: ByteString
vectorAliasMode = "\x00\x00\x03\x66\x6f\x6f\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00"

vectorDot :: ByteString
vectorDot = "\x00\x01\x00"

vectorPort :: ByteString
vectorPort = "\x00\x10\x03\x66\x6f\x6f\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x03\x00\x02\x00\x35"

vectorGenericKey :: ByteString
vectorGenericKey = "\x00\x01\x03\x66\x6f\x6f\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x02\x9b\x00\x05\x68\x65\x6c\x6c\x6f"

vectorEscape :: ByteString
vectorEscape = "\x00\x01\x03\x66\x6f\x6f\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x02\x9b\x00\x09\x68\x65\x6c\x6c\x6f\xd2\x71\x6f\x6f"

vector2IPv6 :: ByteString
vector2IPv6 = "\x00\x01\x03\x66\x6f\x6f\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x06\x00\x20\x20\x01\x0d\xb8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x20\x01\x0d\xb8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x53\x00\x01"

vectorIPv4EmbeddedIPv6 :: ByteString
vectorIPv4EmbeddedIPv6 = "\x00\x01\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x06\x00\x10\x20\x01\x0d\xb8\x01\x22\x03\x44\x00\x00\x00\x00\xc0\x00\x02\x21"

vectorArbitrary :: ByteString
vectorArbitrary = "\x00\x10\x03\x66\x6f\x6f\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x6f\x72\x67\x00\x00\x00\x00\x04\x00\x01\x00\x04\x00\x01\x00\x09\x02\x68\x32\x05\x68\x33\x2d\x31\x39\x00\x04\x00\x04\xc0\x00\x02\x01"

vectorALPN :: ByteString
vectorALPN = "\x00\x10\x03\x66\x6f\x6f\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x6f\x72\x67\x00\x00\x01\x00\x0c\x08\x66\x5c\x6f\x6f\x2c\x62\x61\x72\x02\x68\x32"
